// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  role           UserRole        @default(CITIZEN)
  complaints     Complaint[]     @relation("UserComplaints")
  responses      Response[]      @relation("UserResponses")
  agencyId       String?
  agency         Agency?         @relation(fields: [agencyId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  passwordResets PasswordReset[]

  @@map("users")
}

model Agency {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  categories  Category[]
  complaints  Complaint[]
  staff       User[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("agencies")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  agencyId    String
  agency      Agency      @relation(fields: [agencyId], references: [id])
  complaints  Complaint[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("categories")
}

model Complaint {
  id           String     @id @default(uuid())
  title        String
  description  String
  status       Status     @default(PENDING)
  priority     Priority   @default(MEDIUM)
  location     String?
  contactPhone String?
  contactEmail String?
  userId       String
  user         User       @relation("UserComplaints", fields: [userId], references: [id])
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])
  agencyId     String
  agency       Agency     @relation(fields: [agencyId], references: [id])
  responses    Response[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("complaints")
}

model Response {
  id          String    @id @default(uuid())
  content     String
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  userId      String
  user        User      @relation("UserResponses", fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("responses")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
  @@map("password_resets")
}

enum UserRole {
  ADMIN
  AGENCY_ADMIN
  AGENCY_STAFF
  CITIZEN
}

enum Status {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
